server:
  port: 9090

spring:
  application:
    name: API-GATEWAY
  config:
    import: configserver:${CONFIG_SERVER_ADDRESS:http://localhost:9296}
  cloud:
    gateway:
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins: "*"
            allowedMethods: "*"
            allowedHeaders: "*"
      routes:
        - id: ORDER-SERVICE
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/api/v1//order/**
        #          filters:
        #            - name: CircuitBreaker
        #              args:
        #                name: ORDER-SERVICE
        #                fallbackuri: forward:/orderServiceFallBack
        #            - name: RequestRateLimiter
        #              args:
        #                redis-rate-limiter.replenishRate: 1 # how many requests per second a user is allowed to send without any dropped requests (1000 requests per minute)
        #                redis-rate-limiter.burstCapacity: 1 # maximum number of requests a user is allowed to do in a single second (500 requests per second)
        - id: PAYMENT-SERVICE
          uri: lb://PAYMENT-SERVICE
          predicates:
            - Path=/payment/**
        #          filters:
        #            - name: CircuitBreaker
        #              args:
        #                name: PAYMENT-SERVICE
        #                fallbackuri: forward:/paymentServiceFallBack
        #            - name: RequestRateLimiter
        #              args:
        #                redis-rate-limiter.replenishRate: 1
        #                redis-rate-limiter.burstCapacity: 1
        - id: PRODUCT-SERVICE
          uri: http://product-service-svc
          predicates:
            - Path=/api/v1/product/**
          filters:
            - name: CircuitBreaker
              args:
                name: PRODUCT-SERVICE
                fallbackuri: forward:/productServiceFallBack
        #            - name: RequestRateLimiter
        #              args:
        #                redis-rate-limiter.replenishRate: 1
        #                redis-rate-limiter.burstCapacity: 1
        - id: AUTH-SERVICE
          uri: http://auth-service-svc
          predicates:
            - Path=/api/v1/auth/**
          filters:
            - name: CircuitBreaker
              args:
                name: AUTH-SERVICE
                fallbackuri: forward:/productServiceFallBack
#            - name: RequestRateLimiter
#              args:
#                redis-rate-limiter.replenishRate: 1
#                redis-rate-limiter.burstCapacity: 1

        - id: COURSE-SERVICE
          uri: lb://COURSE-SERVICE
          predicates:
            - Path=/api/v1/course/**
          filters:
            - name: CircuitBreaker
              args:
                name: COURSE-SERVICE
                fallbackuri: forward:/productServiceFallBack
        #            - name: RequestRateLimiter
        #              args:
        #                redis-rate-limiter.replenishRate: 1
        #                redis-rate-limiter.burstCapacity: 1

#logging:
#  level:
#    org.springframework: DEBUG


jwt:
#  TODO: Figure out how to hide this secret
  secret: 404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
  auth_service_url: ${AUTH_SERVICE_URL:http://localhost:8086} # How we gonna deal with k8s?
  course_service_url : ${COURSE_SERVICE_URL:http://localhost:8087}
  product_service_url : ${PRODUCT_SERVICE_URL:http://localhost:8083}
  expiration: 86400000 # a day
  refresh-token:
    expiration: 604800000 # 7 days


eureka:
  client:
    enabled: ${ENABLE_EUREKA:true}
